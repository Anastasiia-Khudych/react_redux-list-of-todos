{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","utils/functions.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","status","query","initialState","ALL","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodo","dispatch","className","map","id","completed","title","isTodoSelected","classNames","onClick","todoAction","TodoFilter","React","memo","currentFilters","value","onChange","event","target","filterActions","ACTIVE","COMPLETED","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","hasLoadingError","setHasLoadingError","loadUserFromServer","a","userId","userFromServer","useEffect","isLoadingFinished","todoActions","href","name","App","loadTodosFromServer","todosFromServer","todosActions","visibleTodos","selectedStatus","filteredTodos","normalizedQuery","toLowerCase","includes","filterTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdd30f8a.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return {\n        ...action.payload,\n      };\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype FilterAll = {\n  type: 'todos/ALL';\n  payload: {\n    status: Status;\n    query: string;\n  }\n};\n\ntype FilterActive = {\n  type: 'todos/ACTIVE';\n  payload: {\n    status: Status;\n    query: string;\n  }\n};\n\ntype FilterCompleted = {\n  type: 'todos/COMPLETED';\n  payload: {\n    status: Status;\n    query: string;\n  }\n};\n\nconst filterAll = (status: Status, query: string): FilterAll => ({\n  type: 'todos/ALL',\n  payload: {\n    status,\n    query,\n  },\n});\n\nconst filterActive = (status: Status, query: string): FilterActive => ({\n  type: 'todos/ACTIVE',\n  payload: {\n    status,\n    query,\n  },\n});\n\nconst filterCompleted = (status: Status, query: string): FilterCompleted => ({\n  type: 'todos/COMPLETED',\n  payload: {\n    status,\n    query,\n  },\n});\n\ntype Action = FilterAll | FilterActive | FilterCompleted;\n\nexport const actions = {\n  filterAll,\n  filterActive,\n  filterCompleted,\n};\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: Status.ALL,\n};\n\nconst filterReducer = (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'todos/ALL':\n      return {\n        query: action.payload.query,\n        status: action.payload.status,\n      };\n    case 'todos/ACTIVE':\n      return {\n        query: action.payload.query,\n        status: action.payload.status,\n      };\n    case 'todos/COMPLETED':\n      return {\n        query: action.payload.query,\n        status: action.payload.status,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodos = {\n  type: 'todos/ADD';\n  payload: Todo[];\n};\n\nconst addTodos = (todos: Todo[]): AddTodos => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { addTodos };\n\ntype Action = AddTodos;\ntype State = [] | Todo[];\n\nconst todosReducer = (state: State = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return [...action.payload];\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as todoAction } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, completed, title } = todo;\n          const isTodoSelected = selectedTodo?.id === id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': isTodoSelected,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(todoAction.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      {\n                        'fa-eye-slash': isTodoSelected,\n                        'fa-eye': !isTodoSelected,\n                      },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { Status } from '../../types/Status';\nimport { actions as filterActions } from '../../features/filter';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nexport const TodoFilter: React.FC = React.memo(() => {\n  const currentFilters = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n  const { status, query } = currentFilters;\n\n  const changeStatus = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    if (value === Status.ALL) {\n      dispatch(filterActions.filterAll(value, query));\n    }\n\n    if (value === Status.ACTIVE) {\n      dispatch(filterActions.filterActive(value, query));\n    }\n\n    if (value === Status.COMPLETED) {\n      dispatch(filterActions.filterCompleted(value, query));\n    }\n  };\n\n  const setSearchString = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    dispatch(filterActions.filterAll(status, value));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={changeStatus}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={setSearchString}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {query.length > 0 && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.filterAll(status, ''))}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as todoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const loadUserFromServer = async (currentTodo: Todo | null) => {\n    try {\n      if (currentTodo) {\n        const userFromServer = await getUser(currentTodo.userId);\n\n        setUser(userFromServer);\n        setHasLoadingError(false);\n      }\n    } catch {\n      setHasLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadUserFromServer(selectedTodo);\n  }, []);\n\n  const isLoadingFinished = (hasLoadingError && user === null) || user;\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const { id, title, completed } = selectedTodo!;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!isLoadingFinished ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(todoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {hasLoadingError ? (\n                <p className=\"has-text-danger\">\n                  Can&apos;t load user data from server\n                </p>\n              )\n                : (\n                  <>\n                    {completed\n                      ? (\n                        <strong className=\"has-text-success\">Done</strong>\n                      )\n                      : (\n                        <strong className=\"has-text-danger\">Planned</strong>\n                      )}\n\n                    {' by '}\n\n                    {user ? (\n                      <a href=\"mailto:Sincere@april.biz\">\n                        {user.name}\n                      </a>\n                    )\n                      : (\n                        <span className=\"has-text-danger\">\n                          User not found\n                        </span>\n                      )}\n                  </>\n                )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { filterTodos } from './utils/functions';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const currentFilters = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const loadTodosFromServer = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.addTodos(todosFromServer));\n      setHasLoadingError(false);\n    } catch {\n      setHasLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  const visibleTodos = filterTodos(todos, currentFilters.status, currentFilters.query);\n\n  const isLoadingFinished = (hasLoadingError && todos.length === 0) || todos.length;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoadingFinished\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                  />\n                )\n                : (\n                  <Loader />\n                )}\n\n              {hasLoadingError && (\n                <p className=\"has-text-danger\">\n                  Can&apos;t load data from server\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const filterTodos = (\n  todos: Todo[], selectedStatus: string, query: string,\n) => {\n  let filteredTodos = todos.filter(todo => {\n    switch (selectedStatus) {\n      case 'active':\n        return todo.completed === false;\n      case 'completed':\n        return todo.completed === true;\n      case 'all':\n      default:\n        return true;\n    }\n  });\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase();\n\n    filteredTodos = filteredTodos\n      .filter(todo => todo.title.toLowerCase().includes(normalizedQuery));\n  }\n\n  return filteredTodos;\n};\n\nexport const findTodo = (todos: Todo[], todoId: number) => {\n  return todos.find(todo => todo.id === todoId);\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}